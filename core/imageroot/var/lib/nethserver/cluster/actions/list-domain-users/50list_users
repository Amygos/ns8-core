#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import sys
import json
from agent.ldapproxy import Ldapproxy
import cluster.ldapclient
import ldap3

request = json.load(sys.stdin)

domain = Ldapproxy().get_domain(request['domain'])

users = []

with cluster.ldapclient.connect(**domain) as ldapconn:

    if domain['schema'] == 'rfc2307':
        response = ldapconn.search(domain['base_dn'], '(&(objectClass=posixAccount)(objectClass=inetOrgPerson))',
            attributes=['displayName', 'uid'],
        )[2]

        for entry in response:
            if entry['type'] != 'searchResEntry':
                continue # ignore referrals
            users.append({
                "user": entry['attributes']['uid'][0],
                "display_name": entry['attributes'].get('displayName') or "",
                "locked": False, # XXX still not implemented
            })

    elif domain['schema'] == 'ad':
        response = ldapconn.search(domain['base_dn'], '(&(objectClass=user)(objectCategory=person))',
            attributes=['displayName', 'sAMAccountName', 'userAccountControl'],
        )[2]

        for entry in response:
            if entry['type'] != 'searchResEntry':
                continue # ignore referrals
            users.append({
                "user": entry['attributes']['sAMAccountName'],
                "display_name": entry['attributes'].get('displayName') or "",
                "locked": bool(entry['attributes']['userAccountControl'] & 0x2), # ACCOUNTDISABLE
            })

    else:
        raise Exception('Unknown LDAP schema ' + domain['schema'])

users = sorted(users, key=lambda rec: rec['user'])
json.dump({"users":users}, fp=sys.stdout)
