#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import sys
import json
import agent
import cluster.modules
import copy

def get_module(source, modules):
    ret = []
    for m in modules:
        if m["source"] == source:
            ret.append(m)
    return ret

rdb = agent.redis_connect(privileged=True)
installed = cluster.modules.list_installed(rdb, skip_core_modules = True)
available = cluster.modules.list_available(rdb, skip_core_modules = True)
updates = cluster.modules.list_updates(rdb, skip_core_modules = True)

install_destinations = []
for node_id in set(rdb.hvals("cluster/module_node")):
    install_destinations.append({
        "node_id": int(node_id),
        "instances": 0,
        "eligible": True,
        "reject_reason": None,
    })
install_destinations.sort(key=lambda n: n["node_id"])

def calculate_node_install_destinations(module):
    module_destinations = copy.deepcopy(install_destinations)
    try:
        max_per_node = int(module["versions"][0]["labels"]["org.nethserver.max-per-node"])
    except:
        return module_destinations
    for mdest in module_destinations:
        count_instances = len(list(filter(lambda m: m["node"] == str(mdest["node_id"]), module["installed"])))
        mdest["instances"] = count_instances
        if count_instances < max_per_node:
            continue # node is eligible, nothing to do
        mdest["eligible"] = False
        mdest["reject_reason"] = {
            "message": "max_per_node_limit",
            "parameter": str(max_per_node),
        }
    return module_destinations

# Prepare variables for later use
for a in available:
    a["updates"] = []
    a["installed"] = []
    if a["source"] in installed.keys():
        a["installed"] = installed[a["source"]]
    a["updates"] = get_module(a["source"], updates)
    a["install_destinations"] = calculate_node_install_destinations(a)

json.dump(available, fp=sys.stdout)
