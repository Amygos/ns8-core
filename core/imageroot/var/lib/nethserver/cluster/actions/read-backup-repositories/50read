#!/usr/bin/env python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import re
import sys
import json
import agent
import subprocess
import os
from datetime import datetime, timezone

request = json.load(sys.stdin)

popen_args={"encoding": 'utf-8', "stdout": subprocess.PIPE, "stderr": sys.stderr}

rdb = agent.redis_connect(privileged=False)

uuid_regex = re.compile('[0-9a-f]{32}\Z', re.I)
backups = list()
for krepo in rdb.scan_iter('cluster/backup_repository/*'):
    repo_uuid = krepo.removeprefix('cluster/backup_repository/')
    rclone_cmd = ['rclone-wrapper', repo_uuid, 'lsjson']
    repo = rdb.hgetall(krepo)

    proot = subprocess.Popen(rclone_cmd + ["REMOTE_PATH"], **popen_args)
    for oroot in json.load(proot.stdout):
        if oroot["IsDir"] is False:
            continue # skip non-dir entries
        pchild = subprocess.Popen(rclone_cmd + ["REMOTE_PATH/" + oroot['Path']], **popen_args)
        for backup in json.load(pchild.stdout):
            # parse almost-ISO-8601 dates
            try:
                sec_index = backup['ModTime'].rfind('.')
                mod_time = datetime.strptime(backup['ModTime'][0:sec_index],'%Y-%m-%dT%H:%M:%S')
                mod_time = int(mod_time.replace(tzinfo=timezone.utc).timestamp())
            except:
                mod_time = -1

            if re.match('[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}', backup['Path'], re.I) is None or backup["IsDir"] is False:
                continue # skip non-repo entries
            installed_instance = ""
            ui_name = ""
            for mod in rdb.scan_iter('module/*/environment'):
                u = rdb.hget(mod, 'MODULE_UUID')
                if rdb.hget(mod, 'MODULE_UUID') == backup['Path']:
                    installed_instance = rdb.hget(mod, 'MODULE_ID')
                    ui_name = rdb.get(f'module/{installed_instance}/ui_name') or ""
                    break
            backups.append({'name': oroot['Path'], 'path': f'{oroot["Path"]}/{backup["Path"]}', 'uuid': backup["Path"], 'timestamp': mod_time, 'repository_id' : repo_uuid, 'repository_name': repo['name'], 'repository_provider': repo['provider'], 'repository_url': repo['url'], 'installed_instance': installed_instance, 'installed_instance_ui_name': ui_name})

print(json.dumps(backups))
