#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import sys
import agent
import cluster.grants
import json
import semver
import urllib.request
import subprocess

rdb = agent.redis_connect(privileged=True)

modules = []

# Grant the owner role to cluster owners on the new module
for m in rdb.scan_iter('cluster/repository/*'):
    repo = rdb.hgetall(m)
    if int(repo["status"]) == 1:
        url = urllib.parse.urljoin(repo["url"], "repodata.json")
        with urllib.request.urlopen(url) as req:
            repodata = json.loads(req.read().decode())

            for metadata in repodata:
                metadata['repository'] = m
                # Parse the image info from remote registry
                with subprocess.Popen(["skopeo", "inspect", f'docker://{metadata["source"]}'], stdout=subprocess.PIPE, stderr=sys.stderr) as proc:
                    info = json.load(proc.stdout)
                    metadata["labels"] = info["Labels"]
                    metadata["versions"] = []
                    versions = []
                    for tag in info["RepoTags"]:
                        try:
                            v = semver.VersionInfo.parse(tag)
                            if int(repo["testing"]) == 1:
                                versions.append(v)
                            elif not int(repo["testing"]) and v.prerelease is None:
                                versions.append(v)
                        except:
                            continue
                    
                    for v in sorted(versions, reverse=True):
                        metadata["versions"].append(f'{v}')

                    if len(metadata["versions"]) <= 0 and int(repo["testing"]) == 1 :
                        metadata["versions"] = ["latest"]

                    modules.append(metadata)
        

json.dump(modules, fp=sys.stdout)
