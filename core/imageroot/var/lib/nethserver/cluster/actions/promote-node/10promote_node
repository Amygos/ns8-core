#!/usr/bin/env python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import sys
import json
import agent
import os

request = json.load(sys.stdin)

node_id = request['node_id']
self_id = int(os.environ['NODE_ID'])

if node_id == self_id:
    agent.set_status('validation-failed')
    json.dump([{'field':'node_id', 'parameter':'node_id', 'value':node_id, 'error':'node_is_already_leader'}], fp=sys.stdout)
    sys.exit(3)

rdb = agent.redis_connect(privileged=True)

# Get the node_id vpn record
evpn = rdb.hgetall(f'node/{node_id}/vpn')

if not evpn['endpoint']:
    agent.set_status('validation-failed')
    json.dump([{'field':'node_id', 'parameter':'node_id', 'value':node_id, 'error':'node_endpoint_not_found'}], fp=sys.stdout)
    sys.exit(4)

redis_role, master_replication_offset, redis_replicas = rdb.execute_command("role")
for client_item in redis_replicas:
    client_ip_address, port, client_replication_offset = client_item
    if evpn['ip_address'] == client_ip_address:
        break # :) Found!
else: # :( not found
    agent.set_status('validation-failed')
    json.dump([{'field':'node_id', 'parameter':'node_id', 'value':node_id, 'error':'node_replica_not_found'}], fp=sys.stdout)
    sys.exit(5)

rdb.publish("cluster/event/leader-changed", json.dumps({"node_id": node_id}))
