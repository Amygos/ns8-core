#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import os
import subprocess
import sys
import json
import agent

r = agent.redis_connect() 

agent_id = os.getenv('AGENT_ID', 'agent_id_not_set')
request = json.load(sys.stdin)
image_id = request['image']

# Retrieve the image attributes from Redis DB. Is it the image for a rootfull module?
image = r.hgetall(f'image/{image_id}')
is_rootfull = image.get('rootfull', "0") == "1"

# Increment the module sequence for image_id (e.g. traefik => traefik1)
module_id = image_id + str(r.incr(f'cluster/module_sequence/{image_id}'))

r.hset(f'module/{module_id}', mapping={
    "image": image_id,
    "image_url_override": "",
    "public_key": "",
    "node": agent_id,
})

# Push the creation task for the new module. Its agent will pick up it during the first boot. 
r.lpush(f'module/{module_id}/tasks', json.dumps({
    "id": f"{agent_id.replace('/', '-')}-add-module-{module_id}",
    "action": "create-module",
    "data": "",
}))

# Launch the module agent (async)
if is_rootfull:
    # Create the module dirs structure
    os.mkdir(f'/var/lib/nethserver/{module_id}/')
    os.mkdir(f'/var/lib/nethserver/{module_id}/state', mode=0o700)
    os.mkdir(f'/var/lib/nethserver/{module_id}/root')
    # Extract the module imageroot
    os.chdir(f'/var/lib/nethserver/{module_id}/root')
    agent.run_helper('extract-image', image['url'])
    # Start the module agent
    agent.run_helper('systemctl', 'enable', '--now', f'agent@{module_id}.service')
else: # rootless
    # Create the module dirs structure
    agent.run_helper('useradd', '-m', '-k', '/etc/nethserver/skel', '-s', '/bin/bash', module_id)
    # Extract the module imageroot
    os.chdir(f'/home/{module_id}/.config')
    agent.run_helper('extract-image', image['url'])
    # Start the module agent
    agent.run_helper('loginctl', 'enable-linger', module_id)

json.dump({
    "id":module_id,
    "key":f"module/{module_id}"
}, sys.stdout)
