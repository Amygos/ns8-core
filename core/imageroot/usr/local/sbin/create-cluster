#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import sys
import agent
import argparse
import hashlib
import uuid
import json
import requests
import os
from envparse import env

# Import the cluster credentials in the environment for agent.redis_connect
if 'AGENT_ID' in os.environ:
    del(os.environ['AGENT_ID'])
if 'REDIS_PASSWORD' in os.environ:
    del(os.environ['REDIS_PASSWORD'])
env.read_envfile('/var/lib/nethserver/cluster/state/agent.env')

parser = argparse.ArgumentParser()
parser.add_argument('endpoint')
parser.add_argument('network', default="10.5.4.0/24")
parser.add_argument('admin_pw', default="Nethesis,1234")

args = parser.parse_args()

endpoint_host, endpoint_port = args.endpoint.split(":")

admin_pwh = hashlib.sha256(args.admin_pw.encode()).hexdigest()

taskdata = {
    "network": args.network,
    "endpoint": args.endpoint,
    "listen_port": endpoint_port,
}

taskobj = {
    "id": str(uuid.uuid4()),
    "action": "create-cluster",
    "data": json.dumps(taskdata),
}

# XXX: grant admin UI access:
rdb = agent.redis_connect(privileged=True)
assert rdb.hset('user/admin', mapping={'cluster':'owner', 'node/1':'owner', 'module/traefik1':'owner'}) >= 0
assert rdb.execute_command('ACL', *f'SETUSER admin ON #{admin_pwh} resetkeys resetchannels nocommands'.split(' ')) == 'OK'
assert rdb.execute_command('ACL', 'SAVE') == 'OK'
assert rdb.lpush('cluster/tasks', json.dumps(taskobj)) >= 0

loginobj = {
    "username": "admin",
    "password": args.admin_pw,
}

response = requests.post('http://127.0.0.1:8080/api/login', json=loginobj)
response.raise_for_status()
payload = response.json()

print("Copy the following command to a worker node to join this cluster with admin's credentials:\n")
print(f"    join-cluster --no-tlsverify https://{endpoint_host} {payload['token']}")
