#!/usr/local/agent/pyenv/bin/python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import json
import psutil
import os.path
import subprocess

def find_ssh_port(kind):
    for proc in psutil.process_iter(['name']):
        if proc.info['name'] == "sshd":
            for conn in proc.connections(kind):
                if conn.status == 'LISTEN':
                    return conn.laddr.port

# Setup podman 3.x to use firewalld as firewall backend
# podman 4.x uses netavark which should not require this configuration
conflist = '/etc/cni/net.d/87-podman.conflist'
if os.path.isfile(conflist):
    with open(conflist, 'r') as fp:
        config = json.loads(fp.read())

    for plugin in config['plugins']:
        if plugin['type'] == 'firewall':
            plugin['backend'] = 'firewalld'

    with open(conflist, 'w') as fp:
        fp.write(json.dumps(config, indent=2))

# Start firewalld
subprocess.run(['systemctl', 'enable', '--now', 'firewalld'])

# Make sure SSH port is open
ssh_port = find_ssh_port('inet4') or find_ssh_port('inet6') or 22
subprocess.run(['firewall-cmd', '--permanent', '--service=ssh', f'--add-port={ssh_port}/tcp'], check = True)
subprocess.run(['firewall-cmd', '--permanent', '--zone=public', '--add-service=ssh'], check = True)

# As WireGuard default port
subprocess.run(['firewall-cmd', '--permanent', f'--new-service=wireguard'], check = True)
subprocess.run(['firewall-cmd', '--permanent', f'--service=wireguard', f'--set-short=WireGuard', f'--add-port=55820/udp'], check = True)
subprocess.run(['firewall-cmd', '--reload'], check = True)
subprocess.run(['firewall-cmd', '--permanent', f'--add-service=wireguard', '--zone=public'])

# Setup firewall basic policies
subprocess.run(['firewall-cmd', '--set-default-zone=public'], check = True)
subprocess.run(['firewall-cmd', '--permanent', '--zone=trusted', '--add-interface=wg0'], check = True)

# Apply the configuration
subprocess.run(['firewall-cmd', '--reload'], check = True)
