#!/bin/bash

# Prepare temporary directory
BACKUP_NAME=$1
TMP_DIR=$HOME/backup-tmp-$BACKUP_NAME
mkdir -p $TMP_DIR

# Read backup password from redis
podman run -i --network host --rm docker.io/redis:6-alpine redis-cli GET backup/$BACKUP_NAME/password > $HOME/restic_password

# Initialize restic repository if it has an empty configuration
REPOSITORY=$(podman run -i --network host --rm docker.io/redis:6-alpine redis-cli GET backup/$BACKUP_NAME/base_repository)"/"$(whoami)
config=$(podman run --network=host --rm -i $volumes -v $HOME/restic_password:/pass -e RESTIC_REPOSITORY=$REPOSITORY docker.io/restic/restic -p /pass cat config)
if [ -z "$config" ]; then
    podman run --network=host --rm -i $volumes -v $HOME/restic_password:/pass -e RESTIC_REPOSITORY=$REPOSITORY docker.io/restic/restic -p /pass init
fi

# Dump database
podman exec -i nextcloud-db sh -c 'exec mysqldump --all-databases -uroot -pnextcloud' > $TMP_DIR/dump.sql

# backup all volumes (except database)
volumes="-v $TMP_DIR/dump.sql:/dump.sql"
sources="/dump.sql"
for v in $(podman volume ls --format={{.Name}} | grep -v nextcloud-db)
do
    volumes="$volumes -v $v:/$v "
    sources="$sources /$v"
done
podman run --network=host --rm -i $volumes -v $HOME/restic_password:/pass -e RESTIC_REPOSITORY=$REPOSITORY docker.io/restic/restic -p /pass backup $sources

# Cleanup
rm -rf $TMP_DIR
