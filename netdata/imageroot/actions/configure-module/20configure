#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import json
import uuid
import sys
import os
import agent

# Try to parse the stdin as JSON.
# If parsing fails, output everything to stderr
data = json.load(sys.stdin)

# Streamer and collector configuration will be saved inside stream.conf
sfh = open("stream.conf", "w")

# Setup default values
role = data.get("role")
api_key = data.get("api_key", str(uuid.uuid1()))
collector_ip = data.get("collector_ip","")
# Save api key to env and redis for later use inside the UI
agent.set_env("API_KEY", api_key)

if role == "collector":
    # Read listen VPN IP address from redis
    r = agent.redis_connect(privileged=False)
    vpn_ip_address = r.hget(f"node/{os.environ['NODE_ID']}/vpn", "ip_address")
    sfh.write(f"[{api_key}]\nenabled = yes\nmemory mode = dbengine\ndefault memory mode = dbengine\nhealth enabled by default = auto\nallow from = *\n")
    agent.set_env("EXTRA_LISTEN", f"-p {vpn_ip_address}:19999:19999")
elif role == "streamer":
    sfh.write(f"[stream]\nenabled = yes\napi key = {api_key}\ndestination = {collector_ip}:19999\n")

sfh.close()

# Make sure everything is saved inside the environment file
# just before starting systemd unit
agent.dump_env()

# When type is set to to collector, print the generated API key,
# otherwise just print back the key received as input
print(json.dumps({"api_key": api_key}))
